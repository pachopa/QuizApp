{"version":3,"sources":["images/nattu-adnan.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20840d8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nattu-adnan.c11f97a3.jpg\";","import { shuffleArray } from './utils'\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[]};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\"\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty : Difficulty) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => (\r\n    {\r\n      ...question,\r\n      answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n    }\r\n  ))\r\n}","export const shuffleArray = (array: any[]) => \r\n  [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\n// Types\r\nimport { AnswerObject } from '../App'\r\n\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question, answers, callback, userAnswer, questionNr, totalQuestions }) =>\r\n  (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map(answer => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n\r\nexport default QuestionCard;","import styled, {createGlobalStyle} from 'styled-components';\r\nimport BGImage from './images/nattu-adnan.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    color: white;\r\n    font-family: Fascinate Inline, Haettenschweiler, 'Arial narrow Bold', sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparnet;\r\n    -moz-background-clip: text;\r\n    -webkit-text-fill-color: transparnet;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`\r\n\r\n","import React, { useState } from 'react';\nimport { QuestionState, fetchQuizQuestions, Difficulty } from './API'\n// Components\nimport QuestionCard from './components/QuestionCard';\n\n//styles\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS, Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //User answer\n      const answer = e.currentTarget.value;\n      //Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //Add score if answer is correct\n      if (correct) setScore(prev => prev + 1)\n      //Save answer in the array for user answers\n      const AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, AnswerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    //Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions ...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n        ) : null}\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//https://opentdb.com/api.php?amount=10&type=multiple"],"sourceRoot":""}